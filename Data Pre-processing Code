#Loading in and Preprocessing the datasets 

# Use Pillow library to convert an input jpeg to a 8 bit grey scale image array for processing.
def jpeg_to_8_bit_greyscale(path, photo_size):
        img = Image.open(path).convert('L')   # convert image to 8-bit grayscale
        # Make aspect ratio as 1:1, by applying image crop. this converts the images into sqaures

        Width, Height = img.size
        if Width != Height:
                m_min_d = min(Width, Height)
                img = img.crop((0, 0, m_min_d, m_min_d))
        # Scales the image to the requested max photo size by Anti-alias sampling:
        img.thumbnail(photo_size, PIL.Image.ANTIALIAS)
        return np.asarray(img)

# Define a function that loads dataset from images into numpy arrays

def load_image_dataset(dir_path, photo_size):
        images = []
        labels = []
        os.chdir(dir_path)
        for file in glob.glob("*.JPG"):
                img = jpeg_to_8_bit_greyscale(file, photo_size)
                if re.match('Canola*', file):
                        images.append(img)
                        labels.append(0)
                elif re.match('Clover*', file):
                        images.append(img)
                        labels.append(1)
                elif re.match('Triticale*', file):
                        images.append(img)
                        labels.append(2)
        for file in glob.glob("*.jpg"):
                img = jpeg_to_8_bit_greyscale(file, photo_size)
                if re.match('Canola*', file):
                        images.append(img)
                        labels.append(0)
                elif re.match('Clover*', file):
                        images.append(img)
                        labels.append(1)
                elif re.match('Triticale*', file):
                        images.append(img)
                        labels.append(2)
                
        return (np.asarray(images), np.asarray(labels))

# image pixel size used to train and tset model
a=45
photo_size= a, a

## load training and test data sets by executing these functions: directory path is changed back to root before each function is executed:
%cd /content
(train_images, train_labels) = load_image_dataset('Cover-Crop-Classification/TRAINING IMAGES',photo_size)
%cd /content
(test_images, test_labels) = load_image_dataset('Cover-Crop-Classification/TESTING IMAGES',photo_size)

#DATADIR= "C:\Users\TJ\2019 summer project\dataset images"

CATEGORIES = ['Canola', 'Clover', 'Triticale']

# checking the shape and size of the created arrays 
train_images.shape
test_images.shape

print(train_labels)

def display_images(images, labels):
        plt.figure(figsize=(10,10))
        grid_size = min(25, len(images))
        for i in range(grid_size):
                plt.subplot(5, 5, i+1)
                plt.xticks([])
                plt.yticks([])
                plt.grid(False)
                plt.imshow(images[i], cmap=plt.cm.binary)
                plt.xlabel(CATEGORIES[labels[i]])

display_images(train_images, train_labels)
plt.show()

plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)


train_images=train_images / 255.0
test_images= test_images / 255.0
